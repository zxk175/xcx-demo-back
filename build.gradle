buildscript {
    apply from: "depend.gradle"

    repositories {
        mavenLocal()

        maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
        maven { url "https://maven.aliyun.com/repository/jcenter" }
        maven { url "https://maven.aliyun.com/repository/google" }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${vers.spring_boot}")
    }
}

allprojects {
    group vers.project_group
    version vers.project_version

    tasks.withType(JavaCompile) {
        options.setEncoding(vers.project_encoding as String)
        options.compilerArgs << "-Xlint:deprecation"
    }

    repositories {
        mavenLocal()

        maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
        maven { url "https://maven.aliyun.com/repository/jcenter" }
        maven { url "https://maven.aliyun.com/repository/google" }
    }
}

// 所有子项目的通用配置
subprojects { subPro ->
    apply plugin: "java"
    apply plugin: "idea"
    apply plugin: "io.spring.dependency-management"

    // Jdk版本
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    configurations {
        // 全局性的关闭依赖传递特性
        all {
            transitive = true
        }

        compileOnly {
            extendsFrom annotationProcessor
        }

        // 所有需要忽略的包定义在此
        // group是必选项，module可选
        compile.exclude group: "org.apache.tomcat"
        compile.exclude module: "undertow-websockets-jsr"
        // 在整个构建过程中排除
        all*.exclude module: "spring-boot-starter-tomcat"
    }

    dependencies {
        testImplementation libs.boot_test

        // 引入根目录和各子项目下的libs中的jar包
        def rootProjectLibs = new File(rootProject.rootDir, "libs").getAbsolutePath()

        implementation fileTree(dir: rootProjectLibs, include: "**/*.jar")
    }

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${vers.spring_boot}")
        }
    }

    compileJava.dependsOn(processResources)
}

// 清除编译后文件
task clear {
    doLast {
        delete rootProject.buildDir
        delete subprojects.buildDir

        subprojects.each { project ->
            def projectDir = project.projectDir.toString()
            def outDir = projectDir + "/out"
            def flag = delete outDir

            println(flag ? "\n==> 删除成功\n[" + outDir : "\n==> 未找到out文件夹\n" + outDir)
        }
    }
}

// 升级命令
// gradle wrapper --gradle-version=6.2.2

// 强制清除 gradle 依赖缓存
// gradle build --refresh-dependencies --stacktrace

// 查看依赖树
// gradle :well-starter:spring-boot-starter-well-exception:dependencies --configuration compile
// gradle :well-starter:spring-boot-starter-well-exception:dependencies > dependencies.txt
